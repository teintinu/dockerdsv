version: '3'

services:
  dev:
    build: ./node
    ports:
     - 1234:1234
     - 3000:3000
     - 8085:8085
     - "3022:22"
    links:
      - mongo
    networks:
      - my-network
    volumes:
      - ./work/git:/git
#      - ./work/.bashrc:/root/.bashrc
      - ./work/.config:/root/.config
      - ./work/.ssh:/root/.ssh
      - ./work/.git:/root/.git
      - ./work/.gitconfig:/root/.gitconfig
      - ./work/.npm:/root/.npm
      - ./work/.vscode-server/:/root/.vscode-server
      - ./work/ssl/:/root/ssl
#      - /etc/letsencrypt/live/cloud.hoda5.com:/root/ssl
#      - ./work/node_modules:/usr/lib/node_modules/
         
  mongo-express:
    image: mongo-express
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: thr0w
      ME_CONFIG_BASICAUTH_PASSWORD: MongoExpress2020!
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: MongoDB2020!
    links:
      - mongo
    networks:
      - my-network

  mongo:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: MongoDB2020!
    ports:
      - "27017:27017"
    volumes:
      - ./work/mongodata:/data/db
    networks:
      - my-network
    command: mongod --auth --replSet rs1 --port 27017
#    command: mongod --auth 
    restart: always
#    healthcheck:
#      start_period: 1s
#      test: echo "afsgasfgafgafga1"
#      interval: 5s
#      test: ["CMD", '$$(echo "rs.initiate().ok || rs.status().ok" | mongo -u $${ME_CONFIG_MONGODB_ADMINUSERNAME} -p $${ME_CONFIG_MONGODB_ADMINPASSWORD"} --quiet) -eq 1']
#            test: test $$(echo "rs.initiate().ok || rs.status().ok" | mongo -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet) -eq 1
#            interval: 10s

#  appwrite-dsv:
#    image: appwrite/install
##    ports:
##      - "3080:80"
##      - "3443:443"
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - ./work/appwrite:/install/appwrite:rw
#    environment:
#      _APP_OPTIONS_FORCE_HTTPS: "false"

#  aerospike:
#    image: aerospike/aerospike-server
#    ports:
#      - 3000
#      - 3001
#      - 3002
#      - 3003

  redis_session:
    image: redis
    ports:
      - "16001:16001"
    volumes:
      - ./redis_session.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - my-network

  redis_cache:
    image: redis
    ports:
      - "16002:16002"
    volumes:
      - ./redis_cache.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
     - my-network

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=session_dsv:redis_session:16001:0,cache_dsv:redis_cache:16002:0,session_prod:redis_session:16001:1,cache_prod:redis_cache:16002:1
    ports:
      - "8082:8081"
    networks:
      - my-network
    links:
      - redis_session
      - redis_cache
  redismin:
    image: redsmin/proxy
    environment:  
    - REDSMIN_KEY=5fd21c04bbe33f0fd45858f5
    - REDIS_URI=redis://redis_session:16001
    networks:
      - my-network

#  whatsapp-thr0w:
#    image: whatsapp-web-reveng
#    ports:
#      - "2019:2019"
#      - "2018:2018"

networks: 
    my-network:
      driver: bridge

